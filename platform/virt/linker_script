OUTPUT_FORMAT("elf64-littleaarch64")

ENTRY(_phys_start)

SECTIONS
{
        KERNEL_PHYSADDR = 0x40400000;
        LOAD_OFFSET = START - KERNEL_PHYSADDR;
        _phys_start = _start - LOAD_OFFSET; /* entry point physical adddress */

        /* 0x40000000 - 0x401fffff: dtb
           0x40200000 - 0x403fffff: initial pages
           0x40400000 - 0x405fffff: initial stack */

        . = 0xffffffff80000000;
        START = .;

        text_start = .;
	.text ALIGN(4096): AT(ADDR(.text) - LOAD_OFFSET)
	{
       	    *(.text)
            *(.text.*)
            . = ALIGN(4096);
            vsyscall_start = .;
            *(.vsyscall)        /* must be at end of section; we use text_end to determine its extent */
            vsyscall_end = .;
	}
	text_end = .;

        /* All kernel variables accessible to userspace
         * Offsets from vvar_page must match the corresponding offsets specified
         * in src/x86_64/vdso.lds
         *
         * We could look at generating them automatically, but for now it's easy enough
         * to do it this way
         */
        .vvar ALIGN(4096): AT(ADDR(.vvar) - LOAD_OFFSET)
        {
            vvar_page = .;
            __vdso_vdso_dat = vvar_page + 128;
        }

        .rodata ALIGN(4096): AT(ADDR(.rodata) - LOAD_OFFSET)
        {
            *(.rodata)
            *(.rodata.*)
        }

        .klib_symtab ALIGN(16): AT(ADDR(.klib_symtab) - LOAD_OFFSET)
        {
                klib_syms_start = .;
                KEEP(*(.klib_symtab.syms))
                klib_syms_end = .;
                KEEP(*(.klib_symtab.strs))
        }

        . = ALIGN(4096);
        READONLY_END = .;

        .data ALIGN(4096): AT(ADDR(.data) - LOAD_OFFSET)
        {
            *(.data)
            *(.data.*)
        }

        .bss  ALIGN(4096): AT(ADDR(.bss) - LOAD_OFFSET)
        {
            PROVIDE(bss_start = .);
            *(.bss)
            *(.bss.*)
            *(COMMON)
        }
        . = ALIGN(4096);
        PROVIDE(bss_end = .);
        END = .;

	. = 0x40600000; /* for early init stack */
	stack_top = .;
}
